use clap::{ArgAction, Command, Parser};
use rusqlite::{Connection, Result};

/*
    Includes the file generated by the build.rs script, which looks like:
    pub const GIT_COMMIT: &str = "c5f7034f79bc3d49c1a9fb81c7cac6a8a778c5c3";
*/
include!(concat!(env!("OUT_DIR"), "/git_commit.rs"));

// - argument-handling ----------------------------------------------
#[derive(Parser)]
#[command(
    // version = "1.0",
    version = GIT_COMMIT,
    author = "Author Name <email@example.com>",
    about = "Runs \"update\" or \"report\" bookplate-scripts based on the provided arguments."
)]
struct Args {
    // #[arg(long, action = ArgAction::SetTrue)]
    // report: bool,
    // #[arg(long, action = ArgAction::SetTrue)]
    // update: bool,
    // #[arg(long, action = ArgAction::SetTrue)]
    // both: bool,
} // end argument-handling ------------------------------------------

// - Person class for sqlite ----------------------------------------
#[derive(Debug)]
struct Person {
    id: i32,
    name: String,
    data: Option<Vec<u8>>,
}

// - main function --------------------------------------------------
fn main() -> Result<()> {

    // - argument-handling ------------------------------------------
    let app = Command::new("Version")
        .version(GIT_COMMIT) // Use the git commit hash as the version
        .about("This app explores outputting the git-commit (on a `--version` flag) via a build.rs script.");
    // println!("app: {:?}", app);
    let _matches = app.get_matches();

    // let conn = Connection::open_in_memory()?;
    let conn = Connection::open("some.db")?;

    let mut stmt = conn.prepare("SELECT id, name, data FROM person")?;
    let person_iter = stmt.query_map([], |row| {
        Ok(Person {
            id: row.get(0)?,
            name: row.get(1)?,
            data: row.get(2)?,
        })
    })?;

    for person in person_iter {
        println!("Found person {:?}", person.unwrap());
    }
    Ok(())
}

/* Code to create a person-table, and insert a record */

// conn.execute(
//     "CREATE TABLE if not exists person (
//         id    INTEGER PRIMARY KEY,
//         name  TEXT NOT NULL,
//         data  BLOB
//     )",
//     (), // empty list of parameters.
// )?;

// let me = Person {
//     id: 0,
//     name: "Steven".to_string(),
//     data: None,
// };

// conn.execute(
//     "INSERT INTO person (name, data) VALUES (?1, ?2)",
//     (&me.name, &me.data),
// )?;
